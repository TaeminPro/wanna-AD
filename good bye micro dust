#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>
#include <vector>

using namespace std;

int R, C, T;
int first_circle;
int second_circle;
int total_count;

int map[51][51];
int visit[51][51];


// 먼지 확산 direction
int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,-1,1 };

// 미세먼지 확산 경로
void BFS(void)
{
	queue<pair<int, int>> q;

	for (int i = 0; i < R; i++)
		for (int j = 0; j < C; j++)
			if (map[i][j] != 0 && map[i][j] != -1)
				q.push(make_pair(i, j));		// 먼지 좌표 queue push

	while (q.empty() == false)
	{
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];


			if (ny >= 0 && nx >= 0 && ny < R && nx < C) {
				if (map[ny][nx] == 0 && visit[ny][nx] == 0) {
					map[ny][nx] = map[y][x] / 5;
					visit[ny][nx] = 1;
				}
				if (visit[ny][nx] == 1) {
					map[ny][nx] = map[ny][nx] + (map[y][x] / 5);
				}
			}

		}

	//	map[y][x] = map[y][x] - (map[y][x] / 5);

	}


}

void Air_cir(void)
{
	bool flag = false;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			if (map[i][j] == -1)
				if (flag == false) {
					first_circle = i;
					flag = false;
				}
				else
					second_circle = i;
			
		}
	}

	// -1 로 도착하는 먼지를 지워야함
	total_count -= map[first_circle - 1][0];
	total_count -= map[second_circle + 1][0];

	// 위의 공기 순환 (반시계)
// 1. 왼쪽줄
	for (int i = first_circle - 1; i > 0; i--)
		map[i][0] = map[i - 1][0];
	// 2. 윗줄
	for (int i = 0; i < C - 1; i++)
		map[0][i] = map[0][i + 1];
	// 3. 오른쪽줄
	for (int i = 1; i <= first_circle; i++)
		map[i - 1][C - 1] = map[i][C - 1];
	// 4. 아랫줄
	for (int i = C - 1; i > 1; i--)
		map[first_circle][i] = map[first_circle][i - 1];
	map[first_circle][1] = 0;

	// 아래공기 순환 (시계)
	// 1. 왼쪽줄
	for (int i = second_circle + 1; i < R - 1; i++)
		map[i][0] = map[i + 1][0];
	// 2. 아랫줄
	for (int i = 0; i < C - 1; i++)
		map[R - 1][i] = map[R - 1][i + 1];
	// 3. 오른쪽줄
	for (int i = R - 1; i >= second_circle; i--)
		map[i][C - 1] = map[i - 1][C - 1];
	// 4. 윗줄
	for (int i = C - 1; i > 1; i--)
		map[second_circle][i] = map[second_circle][i - 1];
	map[second_circle][1] = 0;
}


int main(void)
{
	cin >> R >> C >> T;
	for (int i = 0; i < R; i++)
		for (int j = 0; j < C; j++) 
		{
			cin >> map[i][j];
			memset(visit, false, sizeof(visit));
			if (map[i][j] != 0)
				visit[i][j] = -1;		// 0이 아닌 곳에 전부 -1
		}


	while (T!=0)
	{
		BFS();
		Air_cir();
		for (int i = 0; i < R; i++)
			for (int j = 0; j < C; j++)
				if (map[i][j] != -1)
					total_count += map[i][j];
		--T;
	}



	cout << total_count << endl;
	return 0;
}
