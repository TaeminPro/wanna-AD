#include <iostream>
#include <cstring>
#include <cstdlib>
#include <queue>

using namespace std;

int R, C, T, Answer;
int map[51][51];
int copy_map[51][51];
int visit[51][51];

int dx[] = { 0,0,-1,1 };
int dy[] = { -1,1,0,0 };

queue<pair<int, int>> q;
queue<int> q_air;


void input()
{
	cin >> R >> C >> T;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			cin >> map[i][j];

			if (map[i][j] != 0 && map[i][j] != -1)
			{
				q.push(make_pair(i, j));
			}
		}
	}
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			if (map[i][j] == -1)
			{
				q_air.push(i);
			}
		}
	}
}

void COPY_MAP(int A[][51], int B[][51])
{
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			A[i][j] = B[i][j];
		}
	}
}

void COUT()
{
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			cout << map[i][j] << endl;
		}
	}
}

void Dust_Spread()
{
	COPY_MAP(copy_map,map);

	while (q.empty() == false)
	{
	
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		int cnt = 0;
		int value = map[y][x] / 5;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && nx >= 0 && ny < R && nx < C)
			{
				if (map[ny][nx] != -1)
				{
					copy_map[ny][nx] = copy_map[ny][nx] + value;
					cnt++;
				}
			}
		}
		copy_map[y][x] = copy_map[y][x] - (cnt * value);
	}
	COPY_MAP(map, copy_map);
}

void Air_Rotation()
{

	// 공기청정기(-1) 의 첫 번째 R 좌표 (y)
	int y = q_air.front();
	q_air.pop();

	// first ↓
	for (int i = 0; i < y - 1; i++) {
		map[i + 1][0] = map[i][0];
	}
	// first ←
	for (int i = C - 1; i > 0; i--) {
		map[0][i - 1] = map[0][i];
	}
	// first ↑
	for (int i = y; i > 0; i--) {
		map[i - 1][C - 1] = map[i][C - 1];
	}
	// first → (처음값은 0이 됨)
	for (int i = 1; i < C - 1; i++) {
		map[y][i+1] = map[y][i];
	}
	map[y][1] = 0;


	// 공기청정기(-1) 의 두 번째 R 좌표 (b)
	int b = q_air.front();
	q_air.pop();

	// second ↑
	for (int i = R - 1; i > b + 1; i--) {
		map[i - 1][0] = map[i][0];
	}
	// second ←
	for (int i = C - 1; i > 0; i--) {
		map[R - 1][i - 1] = map[R - 1][i];
	}
	// second ↓
	for (int i = b; i < R - 1; i++) {
		map[i + 1][C - 1] = map[i][C - 1];
	}
	// second → (처음값은 0이 됨)
	for (int i = 1; i < C - 1; i++) {
		map[b][i + 1] = map[b][i];
	}
	map[b][1] = 0;
}

int Dust_sum()
{
	int sum = 0;
	for (int i = 0; i < R; i++) {
		for (int j = 0; j < C; j++) {
			if (map[i][j] != -1)
				sum = sum + map[i][j];
		}
	}
	return sum;
}

void Solution()
{

	for (int i = 0; i < T; i++)
	{
		Dust_Spread();
		Air_Rotation();
		COUT();
	}
	Answer = Dust_sum();
}

void Solve()
{
	input();
	Solution();
	cout << Answer << endl;
}

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
	return 0;
}
