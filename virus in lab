#include <iostream>
#include <algorithm>
#include <cstring>
#include <queue>

const int MAX = 9;
using namespace std;

int N, M;
int result;

int map[9][9];				// cin mpa
int copy_map[9][9];			// map of build 3 walls
int spread_map[MAX][MAX];		// spread map of virus 

int dy[] = { -1,1,0,0 };
int dx[] = { 0,0,-1,1 };

void BFS(void)
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			spread_map[i][j] = copy_map[i][j];
		}
	}

	queue<pair<int, int>>q;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (spread_map[i][j] == 2) {
				q.push(make_pair(i, j));
			}
		}
	}

	while (q.empty() == false)
	{
		int y = q.front().first;
		int x = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny >= 0 && nx >= 0 && ny < N && nx < M) {
				if (spread_map[ny][nx] == 0) {
					spread_map[ny][nx] = 2;
					q.push(make_pair(ny, nx));
				}
			}
		}

	}

	int vacant_cnt = 0;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (spread_map[i][j] == 0) {
				vacant_cnt++;
			}

		}
	}
	result = max(result, vacant_cnt);
}

// 1. Logic of build the wall

void build_wall(int cnt)
{
	if (cnt == 3) {
		BFS();
		return;
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (copy_map[i][j] == 0)
			{
				copy_map[i][j] = 1;
				build_wall(cnt + 1);
				copy_map[i][j] = 0;
			}
		}
	}
}


int main(void)
{
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 0)				// when the wall(1) is finded, copy_map is used. 
			{
				for (int k = 0; k < N; k++) {	// initialize the copy map
					for (int l = 0; l < M; l++) {
						copy_map[k][l] = map[k][l];
					}
				}
				copy_map[i][j] = 1;		// first wall
				build_wall(1);
				copy_map[i][j] = 0;
			}
		}
	}
	cout << result << endl;

	return 0;
}
